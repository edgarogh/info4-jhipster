application {
  config {
    applicationType monolith
    authenticationType jwt
    baseName coopcycle_jhipster
    blueprints []
    buildTool maven
    cacheProvider no
    clientFramework react
    clientPackageManager npm
    clientTheme materia
    clientThemeVariant dark
    databaseType sql
    devDatabaseType h2Disk
    dtoSuffix DTO
    enableHibernateCache false
    enableSwaggerCodegen false
    enableTranslation true
    jhiPrefix jhi
    jhipsterVersion "7.9.3"
    jwtSecretKey "YjkwMTZhOGU3ZmM3MzMzN2UwZTZkNzE4MWJjN2NmMTgxODk4MjA2OTFjNmY2YjQ5YzI4NTU5MDcyODg4ZGViY2Y1NWE4N2VkYTVjMGM1YzU3ZTFlN2UzODkwMzUwNDM4NDMwY2YzOWIwZmU3NjFmNjkzOWRhMGM0NTEyMmMxNjc="
    languages [fr, ar-ly, en, de]
    messageBroker false
    microfrontends []
    nativeLanguage fr
    packageName bzh.edgar.info4coopcyclejhipster
    prodDatabaseType postgresql
    reactive false
    searchEngine false
    serverPort 8080
    serviceDiscoveryType no
    skipClient false
    skipUserManagement false
    testFrameworks []
    websocket false
    withAdminUi true
  }
  entities *
}

entity DelivererUser {

}

entity CustomerUser {
    defaultAddress String maxlength(1024)
}

// Un utilisateur peut avoir un profil livreur et/ou client
relationship OneToOne {
    DelivererUser to User
    CustomerUser to User
}

// Restaurants

entity Restaurant {
    name String required minlength(1) maxlength(256)
    address String required maxlength(1024)
    description TextBlob
}

entity FoodCategory {
    name String maxlength(256)
}

entity FoodItem {
    name String required maxlength(256)
    description String maxlength(65536)

    /**
     * Price in cents
     */
    price Integer required

    photo ImageBlob
}

relationship ManyToMany {
    FoodCategory{contents} to FoodItem{categories}
}

relationship ManyToOne {
    FoodItem{seller} to Restaurant
}

// Commandes

enum OrderState {
    ORDERING,
    DELIVERING
}

entity Order {
    state OrderState
    address String maxlength(1024) required
}

relationship ManyToMany {
    FoodItem to Order
}

relationship ManyToOne {
    CustomerUser to Order{customer required}
    Order{handler} to DelivererUser
}
