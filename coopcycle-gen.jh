application {
  config {
    applicationType monolith
    authenticationType jwt
    baseName coopcycle_jhipster
    blueprints []
    buildTool maven
    cacheProvider no
    clientFramework react
    clientPackageManager npm
    clientTheme materia
    clientThemeVariant dark
    creationTimestamp 1678627382547
    databaseType sql
    devDatabaseType h2Disk
    dtoSuffix DTO
    enableGradleEnterprise false
    enableHibernateCache false
    enableSwaggerCodegen false
    enableTranslation true
    gradleEnterpriseHost ""
    jhiPrefix jhi
    jhipsterVersion "7.9.3"
    jwtSecretKey "YjkwMTZhOGU3ZmM3MzMzN2UwZTZkNzE4MWJjN2NmMTgxODk4MjA2OTFjNmY2YjQ5YzI4NTU5MDcyODg4ZGViY2Y1NWE4N2VkYTVjMGM1YzU3ZTFlN2UzODkwMzUwNDM4NDMwY2YzOWIwZmU3NjFmNjkzOWRhMGM0NTEyMmMxNjc="
    languages [fr, ar-ly, en, de]
    messageBroker false
    microfrontend false
    microfrontends []
    nativeLanguage fr
    otherModules []
    packageName bzh.edgar.info4coopcyclejhipster
    prodDatabaseType postgresql
    reactive false
    searchEngine false
    serverPort 8080
    serviceDiscoveryType no
    skipClient false
    skipUserManagement false
    testFrameworks []
    websocket false
    withAdminUi true
  }

  entities CustomerUser, DelivererUser, FoodCategory, FoodItem, Order, Restaurant
}

entity CustomerUser {
  defaultAddress String maxlength(1024)
}
entity DelivererUser
entity FoodCategory {
  name String maxlength(256)
}
entity FoodItem {
  name String required maxlength(256)
  description String maxlength(65536)
  /**
   * Price in cents
   */
  price Integer required
  photo ImageBlob
}
entity Order (jhi_order) {
  state OrderState
  address String maxlength(1024) required
}
entity Restaurant {
  name String required minlength(1) maxlength(256)
  address String required maxlength(1024)
  description TextBlob
}
enum OrderState {
  ORDERING,
  DELIVERING
}

relationship OneToOne {
  CustomerUser{user} to User
  DelivererUser{user} to User
}
relationship OneToMany {
  Order{customer required} to CustomerUser{order}
}
relationship ManyToOne {
  FoodItem{seller} to Restaurant
  Order{handler} to DelivererUser
}
relationship ManyToMany {
  FoodCategory{contents} to FoodItem{categories}
  FoodItem{order} to Order{foodItem}
}

